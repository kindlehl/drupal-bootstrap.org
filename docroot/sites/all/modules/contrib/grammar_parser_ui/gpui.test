<?php

/**
 * @file
 * Tests for the Grammar Parser UI module (and the Grammar Parser module).
 *
 * Copyright 2009-10 by Jim Berry ("solotandem", http://drupal.org/user/240748)
 */

module_load_include('inc', 'gpui', 'gpui');

/**
 * Unit tests for the grammar parser.
 */
class GrammarParserUnitTestCase extends DrupalUnitTestCase {

  /**
   * The live site file directory path.
   *
   * @var string
   */
  protected $site_directory;

  public static function getInfo() {
    $settings_link = l('here', PARSER_MENU_PATH . '/settings');
    $msg1 = '';
    if (variable_get('gpui_enable_debug_output', FALSE)) {
      $msg1 .= " WARNING: Do not run this test if the \"Enable debug output\" option is checked for this module. Change this setting $settings_link.";
    }
    $options = array();
    if (!variable_get('gpui_preserve_whitespace_like_original', FALSE)) {
      $options[] = '"Preserve whitespace formatting like original (version 1.2)"';
    }
    if (!variable_get('gpui_preserve_array_whitespace', FALSE)) {
      $options[] = '"Preserve array whitespace formatting"';
    }
    if (!empty($options)) {
      $options_text = implode(' and ', $options) . format_plural(count($options), ' option', ' options');
      $settings_text = format_plural(count($options), 'this setting', 'these settings');
      $msg1 .= format_string(' NOTE: During this test the !options_text will enabled for this module. Afterward, !settings_text may be disabled !link.', array('!options_text' => $options_text, '!settings_text' => $settings_text, '!link' => $settings_link));
    }
    return array(
      'name' => 'Run interface',
      'description' => "Test the parser output on a known set of files.<br />$msg1",
      'group' => 'Grammar Parser',
    );
  }

  protected function setUp() {
    // Save the live site files directory path.
    $this->site_directory = DRUPAL_ROOT . '/' . gpui_dir() . '/';

    // Settings that are closest to 1.x settings used to create expected files.
    // @todo Replace test files and use new settings.
    variable_set('gpui_preserve_whitespace', FALSE);
    variable_set('gpui_preserve_newline', FALSE);
    variable_set('gpui_preserve_array_whitespace', TRUE);
    variable_set('gpui_preserve_array_newline', FALSE);
    variable_set('gpui_preserve_whitespace_like_original', TRUE);

    parent::setUp('grammar_parser', 'gpui');
    // Create output file directory.
    module_load_include('install', 'gpui');
    gpui_install();

    // Enable debug printing.
    global $_gpui_debug;
    $_gpui_debug = TRUE;
  }

  protected function testRunInterface() {
    gpui_path_clear('memory');
    gpui_log_memory_use('initial');

    // Include necessary files.
    $module_dirname = DRUPAL_ROOT . '/' . drupal_get_path('module', 'grammar_parser');
    gpui_debug_print("module = $module_dirname");
    // Always load code since not running WebTestCase. (Is this necessary?)
    gpui_load_parser();
    gpui_init_parser();
    gpui_log_memory_use('load code');

    $module_dirname = DRUPAL_ROOT . '/' . drupal_get_path('module', 'gpui');
    $in_dirname = $module_dirname . '/tests/input';
    $expected_dirname = $module_dirname . '/tests/expected';
    $out_dirname = DRUPAL_ROOT . '/' . gpui_dir();
    $filenames = array(
      'common.inc',
      'database.inc',
      'dwtc.php',
      'locale.inc',
//      'module-1.php',
      'uts.module',
    );

    foreach ($filenames as $filename) {
      // Set file name to be parsed.
      $in_filename = $in_dirname . '/' . $filename;
      $expected_filename = $expected_dirname . '/' . $filename;
      $out_filename = $out_dirname . '/' . $filename;
      gpui_debug_print("in = $in_filename");
      gpui_debug_print("exp = $expected_filename");
      gpui_debug_print("out = $out_filename");

      if (is_file($out_filename)) {
        // Delete existing output file (so we know the parser ran and produced a new one).
        unlink($out_filename);
      }

      $contents = file_get_contents($in_filename);
      gpui_log_memory_use('get file contents of ' . $in_filename);
      $this->parseFile($contents, $out_filename);

      // Compare rewritten file to original file.
      $this->compareFiles($expected_filename, $out_filename);
    }
  }

  function parseFile(&$contents, $out_filename) {
    gpui_debug_print(__METHOD__);
    // Get reader.
    $reader = PGPReader::getInstance();
    gpui_log_memory_use('create reader');
    // Get tokens.
    $reader->setSnippet($contents);
    gpui_log_memory_use('set snippet');
    unset($contents);
    gpui_log_memory_use('unset contents');
    $reader->addTokenNames();
    gpui_log_memory_use('add token names');
    // Build grammar statements.
    $reader->buildGrammar();
    gpui_log_memory_use('build grammar');
    // Free memory.
    $reader->setSnippet();
    gpui_log_memory_use('clear tokens');

    // Get writer.
    $writer = PGPWriter::getInstance();
    gpui_log_memory_use('create writer');
    // Build the output code snippet string.
    $string = $writer->toString($reader->getStatements());
    gpui_log_memory_use('writer->toString');

    // Rewrite the file.
    file_put_contents($out_filename, $string);
    gpui_log_memory_use('rewrite the file');
    unset($string);
    gpui_log_memory_use('unset string');

    // Free up memory.
    $reader->reset();
    gpui_log_memory_use('reset reader');
    $reader = NULL;
    gpui_log_memory_use('null reader');
  }

  function compareFiles($expected_filename, $out_filename) {
    $name = pathinfo($out_filename, PATHINFO_BASENAME);
    $b1 = file_exists($expected_filename);
    $this->assertTrue($b1, 'Expected file exists', $name);
    $b2 = file_exists($out_filename);
    $this->assertTrue($b2, 'Output file exists', $name);
    if ($b1 && $b2) {
      $expected = file_get_contents($expected_filename);
      $actual = file_get_contents($out_filename);
      $result = $this->assertEqual($expected, $actual, 'Contents of output file match that of expected file', $name);
      if (!$result) {
        // Write patch file to assist with debugging.
        $patch_filename = $out_filename . '.patch';
        shell_exec("diff -upr {$expected_filename} {$out_filename} > {$patch_filename}");
      }
   }
    else {
      // TODO This copy may have name clashes.
      copy($out_filename, $this->site_directory . $name);
      $this->assertEqual('expected', 'actual', 'Contents of output file match that of expected file', $name);
    }
  }
}

/**
* Functional tests for the grammar parser user interface.
*/
class GrammarParserWebTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Settings interface',
      'description' => 'Test the administration interface for the grammar parser.',
      'group' => 'Grammar Parser',
    );
  }

  function setUp() {
    parent::setUp('gpui');
    $this->admin_user = $this->drupalCreateUser(array('access administration pages', 'administer site configuration', 'manage parser'));
    $this->drupalLogin($this->admin_user);
  }

  /**
   * Calls test methods (prefixed with 'check' to avoid setUp overhead).
   */
  function testAdminInterface() {
    // Include the admin file so we can call its functions.
    module_load_include('inc', 'gpui', 'gpui');

    $this->checkSettingsInterface();
    $this->checkRunInterface();
//    $this->checkBulkRunInterface();
//    $this->checkInlineRunInterface();
  }

  /**
   * Tests the available settings via the user interface.
   */
  function checkSettingsInterface() {
    // Visit the settings page.
    $this->drupalGet(PARSER_MENU_PATH . '/settings');

    $settings = array(
      'gpui_dir' => 'Directory name found in variable: %value',
      'gpui_preserve_whitespace' => 'Global whitespace preservation value matches variable: %value',
      'gpui_preserve_newline' => 'Global newline preservation value matches variable: %value',
      'gpui_preserve_array_whitespace' => 'Array whitespace preservation value matches variable: %value',
      'gpui_preserve_array_newline' => 'Array newline preservation value matches variable: %value',
      'gpui_preserve_whitespace_like_original' => 'Original whitespace preservation value matches variable: %value',
      'gpui_enable_debug_output' => 'Debug output value matches variable: %value',
    );

    // Verify the settings.
    for ($i = 1; $i >= 0; $i--) {
      $setting = $i ? TRUE : FALSE;
      $edit['gpui_dir'] = $i ? $this->randomName() : PARSER_DIR;
      $edit['gpui_preserve_whitespace'] = $setting;
      $edit['gpui_preserve_newline'] = $setting;
      $edit['gpui_preserve_array_whitespace'] = $setting;
      $edit['gpui_preserve_array_newline'] = $setting;
      $edit['gpui_preserve_whitespace_like_original'] = $setting;
      $edit['gpui_enable_debug_output'] = $setting;
      $this->drupalPost(NULL, $edit, t('Save configuration'));
      $this->verifySettings($edit, $settings);
    }
  }

  /**
   * Tests the available settings via the user interface.
   */
  function verifySettings($edit, $settings) {
    // Verify the form response.
    $this->assertRaw(t('The configuration options have been saved.'), t('Settings updated successfully'));

    // Verify the settings.
    foreach ($settings as $setting => $message) {
      $value = variable_get($setting, '');
      $this->assertEqual($value, $edit[$setting], t($message, array('%value' => $value . '<>"' . $edit[$setting] . '"')));
    }

    // Verify the directory name.
    $this->assertTrue(is_dir(gpui_dir()), t('Parser directory exists'));
  }

  /**
   * Tests the file parsing via the user interface.
   */
  function checkRunInterface() {
  }
}
